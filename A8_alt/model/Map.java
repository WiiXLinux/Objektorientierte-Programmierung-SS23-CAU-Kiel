package model;

import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;

/** A class that initializes our Game Map
 * maps are stored within a textfile where
 * . represents a for a player passable field
 * while * represents a wall segment, which is
 * not passable
 */

 //TODO import options for different maps
 //TODO optional autogenerated maps using maze algorithm

public class Map {


    private Scanner m;
    //currently loaded game map is stored in an Arraylist
    public ArrayList<String> map = new ArrayList<String>();

    public Map() {
        /** constructor that initializes a new game map
         * by reading the appropiate map file
         */
        openFile();
        readFile();
        closeFile();
    }

    public String getMap(int x, int y) {
        /** method that returns a specific point on the map
         * to the main program as a string. */
        //Use .get method to access a row, then use .chatAt
        //method to access the column value in the specified row
        String index = map.get(y);
        char mapseg = index.charAt(x);
        //cast char to String to enable World to use the .equals
        //method to compare Strings
        index = String.valueOf(mapseg);
        return index;
    }

    private void openFile() {
        /** method that opens a file containing a game map */
        try {
            m = new Scanner(new File("/Users/nikepulow/Library/Mobile Documents/com~apple~CloudDocs/studies /CAU/sem2/Coding/ProgOO/assignments/A9/LabyrinthPerson_v2/assets/map.txt"));
        }
        catch(Exception e){
            System.out.println("Map not found.");
        }
    }

    int getLengthY() {
        int length = map.size();
        return length;
    }

    int getLengthX() {
        int length = map.get(0).length();
        return length;
    }

    private void readFile() {
        /** method that reads the file containing the game map
         * to an array list, so we do not need to worry about
         * the actual size of the map.
         */
        while(m.hasNext()) {
            //one row is always stored as one string.
            map.add(m.next());
        }
    }

    private void closeFile() {
        /** method that closes the file containing the game map. */
        m.close();
    }

    public void printMap() {
        /** method used for debugging */
        System.out.println(map);
    }
}